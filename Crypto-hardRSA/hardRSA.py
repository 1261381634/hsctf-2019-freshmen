#! /usr/bin/python2
# -*- coding: utf-8 -*-
import gmpy2
from Crypto.Util import number
from flag import flag,e1,e2

assert (e1 < 2**32)
assert (e2 < 2**32)

m = number.bytes_to_long(flag)
p = number.getPrime(1024)
q = number.getPrime(1024)
n1 = p*q
c1 = gmpy2.powmod(m,e1,n1)

n2 = number.getPrime(1024)*number.getPrime(1024)
c2 = map(int,[gmpy2.powmod(p, e1, n2),gmpy2.powmod(p, e2, n2)])
c3 = map(int,[gmpy2.powmod(e1, 3, n2),gmpy2.powmod(e2, 3, n2)])

print(n1)
print(c1)
print(n2)
print(c2)
print(c3)
# 20663344096456626185362892348477533517182186882053142706647337201899714776808039454587375363425751938128492869481460684906092848759613711735700756013008894861989195185060549401529712964426010158352945431667721745681102460842141259650838047870792375214143755091908173397326698162055643906107971766533005039089812811815331154778423702649190016868234677302558982582444995422031609348066079964545525255442215190407057560358436241931555171659856372509260897471750723442235372186082836334290607111749282208938511987754441190576997009839833912277021744306552620969825584824979512644347455552973757943329974621563344199917753
# 14139727457584494101862088685473175273827729319149180773889921042777507502317918654755213855918742411885117244635487136685451417495013825234388324686571053166525924073674541965926470076656501382137723303759425066083346558148408153639034565929304368604563516158750030596254433673692479065974239864494398289558628810048365430737228325790900757809197379244083641018570075232855738086559211386653044594149915462976491631782675659399398678318149076622607099229764870866894332417099662185024736496269823929374777787135298312477046554360710236930787099529142168675951272057399692649905525052185757093237606096825993265471726
# 20424621622595493871859268042848954419289728157139143375916986071289614430743936073689036985960932830447777244206062188644932201862077559041413720936694625945320655071879461786229473741810254959219536599969895202606170827391182395035062593818510809546233530683231945335978892038195149797387062629572766790355105394685876838007098373650368315482810314076520971048079313926331142062349058298821820176340012748728065713408283512886127252933278539701451686628994520232456030085515004347623866838448982381613708815131802800571191953100984933471286660883381431256501007982955639458421262619296674687746085348204414896451037
# [11574894642213302918163105174394246729226388036289484642261488231785862925575479935318899829690468173201209614106059295555147019503741677328869593359362821690071730699531370860218206012606358391990798143231212845158178382799904752060571421083668288672356954621722700922696466520976999163982949668709543243469533702195039963264242813987704228692511204818448702438589794188977305020895199113463792111132336095147923772158245406583536883511705792207654783526415172411855853457162318277342259926326746422133543614345187975292523809610341839394552897895252597570588493313668073174173605272010135234960408609358502009518245L, 7255995422699855335813271472817743023592078018568563210340201400649311532530182582686972424033986635162780622208341228000502276330798592888472031319575068835516690777891958048636498807846227042496081961435630452313721307856960769940933316194763267824707853546675472671143375432687139747638156609995628748500812574898694192804271528302770201453129657244974313233094528419326988945797161160891978889019810629890569482411488446940635058670703734202012518989816514481029587893736409213344354126061157389720576051613852171103078761314829716555266111563279288628145277094929462734361791307334218134021994049694303402767560L]
# [281487861809153, 49947026556362417]